use num_derive::FromPrimitive;

// 单字节的OpCode
#[repr(u8)]
#[derive(FromPrimitive)]
pub enum OpCode {
    Nop,
    Break,
    Ldarg0,
    Ldarg1,
    Ldarg2,
    Ldarg3,
    Ldloc0,
    Ldloc1,
    Ldloc2,
    Ldloc3,
    Stloc0,
    Stloc1,
    Stloc2,
    Stloc3,
    Ldargs,  // <uint8 (num)>,
    Ldargas,  // <uint8 (argNum)>,
    Stargs,  // <uint8 (num)>,
    Ldlocs,  // <uint8 (indx)>,
    Ldlocas,  // <uint8 (indx)>,
    Stlocs,  // <uint8 (indx)>,
    Ldnull,
    Ldci4m1,
    Ldci40,
    Ldci41,
    Ldci42,
    Ldci43,
    Ldci44,
    Ldci45,
    Ldci46,
    Ldci47,
    Ldci48,
    Ldci4s,  // <int8 (num)>,
    Ldci4,  // <int32 (num)>,
    Ldci8,  // <int64 (num)>,
    Ldcr4,  // <float32 (num)>,
    Ldcr8,  // <float64 (num)>,
    Dup = 0x25,
    Pop,
    Jmp,  // <method>,
    Call,  // <method>,
    Calli,  // <callsitedescr>,
    Ret,
    Brs,  // <int8 (target)>,
    Brfalses,  // <int8 (target)>,
    // Brnulls,  // <int8 (target)>,
    // Brzeros,  // <int8 (target)>,
    Brtrues,  // <int8 (target)>,
    // Brinsts,  // <int8 (target)>,
    Beqs,  // <int8 (target)>,
    Bges,  // <int8 (target)>,
    Bgts,  // <int8 (target)>,
    Bles,  // <int8 (target)>,
    Blts,  // <int8 (target)>,
    Bneuns,  // <int8 (target)>,
    Bgeuns,  // <int8 (target)>,
    Bgtuns,  // <int8 (target)>,
    Bleuns,  // <int8 (target)>,
    Bltuns,  // <int8 (target)>,
    Br,  // <int32 (target)>,
    Brfalse,  // <int32 (target)>,
    // Brnull,  // <int32 (target)>,
    // Brzero,  // <int32 (target)>,
    Brtrue,  // <int32 (target)>,
    // Brinst,  // <int32 (target)>,
    Beq,  // <int32 (target)>,
    Bge,  // <int32 (target)>,
    Bgt,  // <int32 (target)>,
    Ble,  // <int32 (target)>,
    Blt,  // <int32 (target)>,
    Bneun,  // <int32 (target)>,
    Bgeun,  // <int32 (target)>,
    Bgtun,  // <int32 (target)>,
    Bleun,  // <int32 (target)>,
    Bltun,  // <int32 (target)>,
    Switch,  // <uint32, int32, int32 (t1tN)>,
    Ldindi1,
    Ldindu1,
    Ldindi2,
    Ldindu2,
    Ldindi4,
    Ldindu4,
    Ldindi8,
    // Ldindu8,
    Ldindi,
    Ldindr4,
    Ldindr8,
    Ldindref,
    Stindref,
    Stindi1,
    Stindi2,
    Stindi4,
    Stindi8,
    Stindr4,
    Stindr8,
    Add,
    Sub,
    Mul,
    Div,
    Divun,
    Rem,
    Remun,
    And,
    Or,
    Xor,
    Shl,
    Shr,
    Shrun,
    Neg,
    Not,
    Convi1,
    Convi2,
    Convi4,
    Convi8,
    Convr4,
    Convr8,
    Convu4,
    Convu8,
    Callvirt,  // <method>,
    Cpobj,  // <typeTok>,
    Ldobj,  // <typeTok>,
    Ldstr,  // <string>,
    Newobj,  // <ctor>,
    Castclass,  // <class>,
    Isinst,  // <class>,
    Convrun,
    Unbox = 0x79,  // <valuetype>,
    Throw,
    Ldfld,  // <field>,
    Ldflda,  // <field>,
    Stfld,  // <field>,
    Ldsfld,  // <field>,
    Ldsflda,  // <field>,
    Stsfld,  // <field>,
    Stobj,  // <typeTok>,
    Convovfi1un,
    Convovfi2un,
    Convovfi4un,
    Convovfi8un,
    Convovfu1un,
    Convovfu2un,
    Convovfu4un,
    Convovfu8un,
    Convovfiun,
    Convovfuun,
    Box,  // <typeTok>,
    Newarr,  // <etype>,
    Ldlen,
    Ldelema,  // <class>,
    Ldelemi1,
    Ldelemu1,
    Ldelemi2,
    Ldelemu2,
    Ldelemi4,
    Ldelemu4,
    Ldelemi8,
    // Ldelemu8,
    Ldelemi,
    Ldelemr4,
    Ldelemr8,
    Ldelemref,
    Stelemi,
    Stelemi1,
    Stelemi2,
    Stelemi4,
    Stelemi8,
    Stelemr4,
    Stelemr8,
    Stelemref,
    Ldelem,  // <typeTok>,
    Stelem,  // <typeTok>,
    Unboxany,  // <typeTok>,
    Convovfi1 = 0xB3,
    Convovfu1,
    Convovfi2,
    Convovfu2,
    Convovfi4,
    Convovfu4,
    Convovfi8,
    Convovfu8,
    Refanyval = 0xC2,  // <type>,
    Ckfinite,
    Mkrefany = 0xC6,  // <class>,
    Ldtoken = 0xD0,  // <token>,
    Convu2,
    Convu1,
    Convi,
    Convovfi,
    Convovfu,
    Addovf,
    Addovfun,
    Mulovf,
    Mulovfun,
    Subovf,
    Subovfun,
    Endfault,
    Endfinally,
    Leave,  // <int32 (target)>,
    Leaves,  // <int8 (target)>,
    Stindi,
    Convu,

    Next = 0xFE,
}

#[repr(u8)]
#[derive(FromPrimitive)]
/// 双字节的opcode，第一位为0xFE
pub enum OpCode2 {
    Arglist,
    Ceq,
    Cgt,
    Cgtun,
    Clt,
    Cltun,
    Ldftn,          // <method>
    Ldvirtftn,      // <method>
    Ldarg,          // <uint16 (num)>
    Ldarga,         // <uint16 (argNum)>
    Starg,          // <uint16 (num)>
    Ldloc,          // <uint16 (indx)>
    Ldloca,         // <uint16 (indx)>
    Stloc,          // <uint16 (indx)>
    Localloc,
    Endfilter,
    Unaligned,      // (alignment)
    Volatile,
    Tail,
    Initobj,        // <typeTok>
    Constrained,    // <thisType>
    Cpblk,
    Initblk,
    No,
    Rethrow,
    Sizeof,         // <typeTok>
    Refanytype,
    Readonly,
}